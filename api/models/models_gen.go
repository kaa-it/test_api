// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type City struct {
	Name string `json:"name"`
}

type ComplexProfile struct {
	Pwm0  int    `json:"pwm0"`
	Time1 string `json:"time1"`
	Pwm1  int    `json:"pwm1"`
	Time2 string `json:"time2"`
	Pwm2  int    `json:"pwm2"`
	Time3 string `json:"time3"`
	Pwm3  int    `json:"pwm3"`
	Time4 string `json:"time4"`
	Pwm4  int    `json:"pwm4"`
}

type ComplexProfileInput struct {
	Pwm0  int    `json:"pwm0"`
	Time1 string `json:"time1"`
	Pwm1  int    `json:"pwm1"`
	Time2 string `json:"time2"`
	Pwm2  int    `json:"pwm2"`
	Time3 string `json:"time3"`
	Pwm3  int    `json:"pwm3"`
	Time4 string `json:"time4"`
	Pwm4  int    `json:"pwm4"`
}

type Controller struct {
	Mac       string  `json:"mac"`
	Segment   *string `json:"segment"`
	City      *string `json:"city"`
	Power     *string `json:"power"`
	Serial    *string `json:"serial"`
	Imei      *string `json:"imei"`
	Imsi      *string `json:"imsi"`
	Ccid      *string `json:"ccid"`
	Phone     *string `json:"phone"`
	Connected bool    `json:"connected"`
	Master    *bool   `json:"master"`
	Tlevel    *int    `json:"tlevel"`
	Rng       *int    `json:"rng"`
	Smac      *string `json:"smac"`
	Dir       *int    `json:"dir"`
	Nid       *int    `json:"nid"`
	Group     *int    `json:"group"`
	Level     *int    `json:"level"`
	Mrssi     *int    `json:"mrssi"`
	Rssi      *int    `json:"rssi"`
	Devt      *int    `json:"devt"`
	Devm      *int    `json:"devm"`
}

type Lamp struct {
	Mac             string            `json:"mac"`
	Source          string            `json:"source"`
	Segment         *string           `json:"segment"`
	City            *string           `json:"city"`
	Dir             int               `json:"dir"`
	Level           int               `json:"level"`
	Nid             *int              `json:"nid"`
	Group           int               `json:"group"`
	Smac            string            `json:"smac"`
	Rssi            int               `json:"rssi"`
	Devt            int               `json:"devt"`
	Devm            int               `json:"devm"`
	Eblk            *int              `json:"eblk"`
	Cycles          *string           `json:"cycles"`
	Runh            *int              `json:"runh"`
	Nvsc            *int              `json:"nvsc"`
	Lpwm            *int              `json:"lpwm"`
	Cpwm            *int              `json:"cpwm"`
	Mrssi           int               `json:"mrssi"`
	Rfch            *int              `json:"rfch"`
	Rfpwr           *int              `json:"rfpwr"`
	Pwm             *int              `json:"pwm"`
	Pwmct           *int              `json:"pwmct"`
	Pow             *int              `json:"pow"`
	Lux             *int              `json:"lux"`
	Temp            *int              `json:"temp"`
	Energy          *int              `json:"energy"`
	Rng             *int              `json:"rng"`
	Tlevel          int               `json:"tlevel"`
	Date            *int64            `json:"date"`
	Lat             *float64          `json:"lat"`
	Lng             *float64          `json:"lng"`
	Val             *int              `json:"val"`
	Rise            *string           `json:"rise"`
	Set             *string           `json:"set"`
	ID              *int              `json:"id"`
	Scdtm           *int              `json:"scdtm"`
	Rfps            *int              `json:"rfps"`
	Twil            *int              `json:"twil"`
	Status          LampStatus        `json:"status"`
	Received        int64             `json:"received"`
	SimpleProfiles  []*SimpleProfile  `json:"simpleProfiles"`
	ComplexProfiles []*ComplexProfile `json:"complexProfiles"`
}

type Segment struct {
	Name string `json:"name"`
	City string `json:"city"`
}

type SimpleProfile struct {
	D1 int `json:"d1"`
	P1 int `json:"p1"`
	D2 int `json:"d2"`
	P2 int `json:"p2"`
}

type SimpleProfileInput struct {
	D1 int `json:"d1"`
	P1 int `json:"p1"`
	D2 int `json:"d2"`
	P2 int `json:"p2"`
}

type LampStatus string

const (
	LampStatusOn      LampStatus = "ON"
	LampStatusOff     LampStatus = "OFF"
	LampStatusBroken  LampStatus = "BROKEN"
	LampStatusUnknown LampStatus = "UNKNOWN"
)

var AllLampStatus = []LampStatus{
	LampStatusOn,
	LampStatusOff,
	LampStatusBroken,
	LampStatusUnknown,
}

func (e LampStatus) IsValid() bool {
	switch e {
	case LampStatusOn, LampStatusOff, LampStatusBroken, LampStatusUnknown:
		return true
	}
	return false
}

func (e LampStatus) String() string {
	return string(e)
}

func (e *LampStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LampStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LampStatus", str)
	}
	return nil
}

func (e LampStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
